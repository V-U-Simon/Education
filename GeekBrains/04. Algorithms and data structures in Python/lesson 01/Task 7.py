# 7. По длинам трех отрезков, введенных пользователем,
# определить возможность существования треугольника,
# составленного из этих отрезков.

# Если такой треугольник существует, то определить,
# является ли он разносторонним, равнобедренным или равносторонним.

def check_triangle(a, b, c):
    """ проверяет треугольник по длиннам его сторон """

    if not (a + b > c) and (a + c > b) and (b + c > a):
        return 'треугольник не существует'
    elif a == b == c:
        return 'равносторонний треугольник'
    else:
        return 'разносторонний треугольник'


if __name__ == '__main__':
    assert check_triangle(2, 2, 1000) == 'треугольник не существует'
    assert check_triangle(2, 2, 2) == 'равносторонний треугольник'
    assert check_triangle(1, 2, 2) == 'разносторонний треугольник'

    a = int(input("a = "))
    b = int(input("b = "))
    c = int(input("c = "))
    check_triangle(a, b, c)
